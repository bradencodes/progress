// Code generated by Prisma (prisma@1.32.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  activity: (where?: ActivityWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  activity: (where: ActivityWhereUniqueInput) => ActivityNullablePromise;
  activities: (args?: {
    where?: ActivityWhereInput;
    orderBy?: ActivityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Activity>;
  activitiesConnection: (args?: {
    where?: ActivityWhereInput;
    orderBy?: ActivityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ActivityConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createActivity: (data: ActivityCreateInput) => ActivityPromise;
  updateActivity: (args: {
    data: ActivityUpdateInput;
    where: ActivityWhereUniqueInput;
  }) => ActivityPromise;
  updateManyActivities: (args: {
    data: ActivityUpdateManyMutationInput;
    where?: ActivityWhereInput;
  }) => BatchPayloadPromise;
  upsertActivity: (args: {
    where: ActivityWhereUniqueInput;
    create: ActivityCreateInput;
    update: ActivityUpdateInput;
  }) => ActivityPromise;
  deleteActivity: (where: ActivityWhereUniqueInput) => ActivityPromise;
  deleteManyActivities: (where?: ActivityWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  activity: (
    where?: ActivitySubscriptionWhereInput
  ) => ActivitySubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ActivityOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "color_ASC"
  | "color_DESC"
  | "adds_ASC"
  | "adds_DESC"
  | "nextReset_ASC"
  | "nextReset_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ActivityUpdateprogressInput {
  set?: Maybe<Int[] | Int>;
}

export type ActivityWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ActivityCreatestartInput {
  set?: Maybe<Int[] | Int>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  username: String;
  email: String;
  password: String;
  activities?: Maybe<ActivityCreateManyWithoutCreatedByInput>;
}

export interface ActivityCreateendInput {
  set?: Maybe<Int[] | Int>;
}

export interface ActivityUpdateendInput {
  set?: Maybe<Int[] | Int>;
}

export interface ActivityCreaterepeatInput {
  set?: Maybe<Int[] | Int>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  activities_every?: Maybe<ActivityWhereInput>;
  activities_some?: Maybe<ActivityWhereInput>;
  activities_none?: Maybe<ActivityWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface UserCreateOneWithoutActivitiesInput {
  create?: Maybe<UserCreateWithoutActivitiesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ActivitySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ActivityWhereInput>;
  AND?: Maybe<
    ActivitySubscriptionWhereInput[] | ActivitySubscriptionWhereInput
  >;
  OR?: Maybe<ActivitySubscriptionWhereInput[] | ActivitySubscriptionWhereInput>;
  NOT?: Maybe<
    ActivitySubscriptionWhereInput[] | ActivitySubscriptionWhereInput
  >;
}

export interface UserCreateWithoutActivitiesInput {
  id?: Maybe<ID_Input>;
  username: String;
  email: String;
  password: String;
}

export interface ActivityUpdateManyDataInput {
  name?: Maybe<String>;
  color?: Maybe<String>;
  progress?: Maybe<ActivityUpdateprogressInput>;
  target?: Maybe<ActivityUpdatetargetInput>;
  start?: Maybe<ActivityUpdatestartInput>;
  end?: Maybe<ActivityUpdateendInput>;
  repeat?: Maybe<ActivityUpdaterepeatInput>;
  adds?: Maybe<Boolean>;
  nextReset?: Maybe<Int>;
}

export interface ActivityUpdateInput {
  name?: Maybe<String>;
  color?: Maybe<String>;
  progress?: Maybe<ActivityUpdateprogressInput>;
  target?: Maybe<ActivityUpdatetargetInput>;
  start?: Maybe<ActivityUpdatestartInput>;
  end?: Maybe<ActivityUpdateendInput>;
  repeat?: Maybe<ActivityUpdaterepeatInput>;
  adds?: Maybe<Boolean>;
  nextReset?: Maybe<Int>;
  createdBy?: Maybe<UserUpdateOneRequiredWithoutActivitiesInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ActivityUpdateManyWithoutCreatedByInput {
  create?: Maybe<
    ActivityCreateWithoutCreatedByInput[] | ActivityCreateWithoutCreatedByInput
  >;
  delete?: Maybe<ActivityWhereUniqueInput[] | ActivityWhereUniqueInput>;
  connect?: Maybe<ActivityWhereUniqueInput[] | ActivityWhereUniqueInput>;
  set?: Maybe<ActivityWhereUniqueInput[] | ActivityWhereUniqueInput>;
  disconnect?: Maybe<ActivityWhereUniqueInput[] | ActivityWhereUniqueInput>;
  update?: Maybe<
    | ActivityUpdateWithWhereUniqueWithoutCreatedByInput[]
    | ActivityUpdateWithWhereUniqueWithoutCreatedByInput
  >;
  upsert?: Maybe<
    | ActivityUpsertWithWhereUniqueWithoutCreatedByInput[]
    | ActivityUpsertWithWhereUniqueWithoutCreatedByInput
  >;
  deleteMany?: Maybe<ActivityScalarWhereInput[] | ActivityScalarWhereInput>;
  updateMany?: Maybe<
    | ActivityUpdateManyWithWhereNestedInput[]
    | ActivityUpdateManyWithWhereNestedInput
  >;
}

export interface ActivityUpsertWithWhereUniqueWithoutCreatedByInput {
  where: ActivityWhereUniqueInput;
  update: ActivityUpdateWithoutCreatedByDataInput;
  create: ActivityCreateWithoutCreatedByInput;
}

export interface ActivityUpdatetargetInput {
  set?: Maybe<Int[] | Int>;
}

export interface ActivityUpdateWithWhereUniqueWithoutCreatedByInput {
  where: ActivityWhereUniqueInput;
  data: ActivityUpdateWithoutCreatedByDataInput;
}

export interface ActivityUpdatestartInput {
  set?: Maybe<Int[] | Int>;
}

export interface ActivityCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  color: String;
  progress?: Maybe<ActivityCreateprogressInput>;
  target?: Maybe<ActivityCreatetargetInput>;
  start?: Maybe<ActivityCreatestartInput>;
  end?: Maybe<ActivityCreateendInput>;
  repeat?: Maybe<ActivityCreaterepeatInput>;
  adds: Boolean;
  nextReset: Int;
  createdBy: UserCreateOneWithoutActivitiesInput;
}

export interface UserUpdateInput {
  username?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  activities?: Maybe<ActivityUpdateManyWithoutCreatedByInput>;
}

export interface ActivityCreatetargetInput {
  set?: Maybe<Int[] | Int>;
}

export interface ActivityUpdaterepeatInput {
  set?: Maybe<Int[] | Int>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface UserUpdateOneRequiredWithoutActivitiesInput {
  create?: Maybe<UserCreateWithoutActivitiesInput>;
  update?: Maybe<UserUpdateWithoutActivitiesDataInput>;
  upsert?: Maybe<UserUpsertWithoutActivitiesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ActivityUpdateManyWithWhereNestedInput {
  where: ActivityScalarWhereInput;
  data: ActivityUpdateManyDataInput;
}

export interface UserUpdateWithoutActivitiesDataInput {
  username?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface ActivityUpdateWithoutCreatedByDataInput {
  name?: Maybe<String>;
  color?: Maybe<String>;
  progress?: Maybe<ActivityUpdateprogressInput>;
  target?: Maybe<ActivityUpdatetargetInput>;
  start?: Maybe<ActivityUpdatestartInput>;
  end?: Maybe<ActivityUpdateendInput>;
  repeat?: Maybe<ActivityUpdaterepeatInput>;
  adds?: Maybe<Boolean>;
  nextReset?: Maybe<Int>;
}

export interface ActivityCreateprogressInput {
  set?: Maybe<Int[] | Int>;
}

export interface ActivityCreateManyWithoutCreatedByInput {
  create?: Maybe<
    ActivityCreateWithoutCreatedByInput[] | ActivityCreateWithoutCreatedByInput
  >;
  connect?: Maybe<ActivityWhereUniqueInput[] | ActivityWhereUniqueInput>;
}

export interface ActivityCreateWithoutCreatedByInput {
  id?: Maybe<ID_Input>;
  name: String;
  color: String;
  progress?: Maybe<ActivityCreateprogressInput>;
  target?: Maybe<ActivityCreatetargetInput>;
  start?: Maybe<ActivityCreatestartInput>;
  end?: Maybe<ActivityCreateendInput>;
  repeat?: Maybe<ActivityCreaterepeatInput>;
  adds: Boolean;
  nextReset: Int;
}

export interface ActivityUpdateManyMutationInput {
  name?: Maybe<String>;
  color?: Maybe<String>;
  progress?: Maybe<ActivityUpdateprogressInput>;
  target?: Maybe<ActivityUpdatetargetInput>;
  start?: Maybe<ActivityUpdatestartInput>;
  end?: Maybe<ActivityUpdateendInput>;
  repeat?: Maybe<ActivityUpdaterepeatInput>;
  adds?: Maybe<Boolean>;
  nextReset?: Maybe<Int>;
}

export interface UserUpsertWithoutActivitiesInput {
  update: UserUpdateWithoutActivitiesDataInput;
  create: UserCreateWithoutActivitiesInput;
}

export interface ActivityWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  color?: Maybe<String>;
  color_not?: Maybe<String>;
  color_in?: Maybe<String[] | String>;
  color_not_in?: Maybe<String[] | String>;
  color_lt?: Maybe<String>;
  color_lte?: Maybe<String>;
  color_gt?: Maybe<String>;
  color_gte?: Maybe<String>;
  color_contains?: Maybe<String>;
  color_not_contains?: Maybe<String>;
  color_starts_with?: Maybe<String>;
  color_not_starts_with?: Maybe<String>;
  color_ends_with?: Maybe<String>;
  color_not_ends_with?: Maybe<String>;
  adds?: Maybe<Boolean>;
  adds_not?: Maybe<Boolean>;
  nextReset?: Maybe<Int>;
  nextReset_not?: Maybe<Int>;
  nextReset_in?: Maybe<Int[] | Int>;
  nextReset_not_in?: Maybe<Int[] | Int>;
  nextReset_lt?: Maybe<Int>;
  nextReset_lte?: Maybe<Int>;
  nextReset_gt?: Maybe<Int>;
  nextReset_gte?: Maybe<Int>;
  createdBy?: Maybe<UserWhereInput>;
  AND?: Maybe<ActivityWhereInput[] | ActivityWhereInput>;
  OR?: Maybe<ActivityWhereInput[] | ActivityWhereInput>;
  NOT?: Maybe<ActivityWhereInput[] | ActivityWhereInput>;
}

export interface ActivityScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  color?: Maybe<String>;
  color_not?: Maybe<String>;
  color_in?: Maybe<String[] | String>;
  color_not_in?: Maybe<String[] | String>;
  color_lt?: Maybe<String>;
  color_lte?: Maybe<String>;
  color_gt?: Maybe<String>;
  color_gte?: Maybe<String>;
  color_contains?: Maybe<String>;
  color_not_contains?: Maybe<String>;
  color_starts_with?: Maybe<String>;
  color_not_starts_with?: Maybe<String>;
  color_ends_with?: Maybe<String>;
  color_not_ends_with?: Maybe<String>;
  adds?: Maybe<Boolean>;
  adds_not?: Maybe<Boolean>;
  nextReset?: Maybe<Int>;
  nextReset_not?: Maybe<Int>;
  nextReset_in?: Maybe<Int[] | Int>;
  nextReset_not_in?: Maybe<Int[] | Int>;
  nextReset_lt?: Maybe<Int>;
  nextReset_lte?: Maybe<Int>;
  nextReset_gt?: Maybe<Int>;
  nextReset_gte?: Maybe<Int>;
  AND?: Maybe<ActivityScalarWhereInput[] | ActivityScalarWhereInput>;
  OR?: Maybe<ActivityScalarWhereInput[] | ActivityScalarWhereInput>;
  NOT?: Maybe<ActivityScalarWhereInput[] | ActivityScalarWhereInput>;
}

export interface UserUpdateManyMutationInput {
  username?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  username: String;
  email: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface ActivityPreviousValues {
  id: ID_Output;
  name: String;
  color: String;
  progress: Int[];
  target: Int[];
  start: Int[];
  end: Int[];
  repeat: Int[];
  adds: Boolean;
  nextReset: Int;
}

export interface ActivityPreviousValuesPromise
  extends Promise<ActivityPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  color: () => Promise<String>;
  progress: () => Promise<Int[]>;
  target: () => Promise<Int[]>;
  start: () => Promise<Int[]>;
  end: () => Promise<Int[]>;
  repeat: () => Promise<Int[]>;
  adds: () => Promise<Boolean>;
  nextReset: () => Promise<Int>;
}

export interface ActivityPreviousValuesSubscription
  extends Promise<AsyncIterator<ActivityPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  color: () => Promise<AsyncIterator<String>>;
  progress: () => Promise<AsyncIterator<Int[]>>;
  target: () => Promise<AsyncIterator<Int[]>>;
  start: () => Promise<AsyncIterator<Int[]>>;
  end: () => Promise<AsyncIterator<Int[]>>;
  repeat: () => Promise<AsyncIterator<Int[]>>;
  adds: () => Promise<AsyncIterator<Boolean>>;
  nextReset: () => Promise<AsyncIterator<Int>>;
}

export interface ActivitySubscriptionPayload {
  mutation: MutationType;
  node: Activity;
  updatedFields: String[];
  previousValues: ActivityPreviousValues;
}

export interface ActivitySubscriptionPayloadPromise
  extends Promise<ActivitySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ActivityPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ActivityPreviousValuesPromise>() => T;
}

export interface ActivitySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ActivitySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ActivitySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ActivityPreviousValuesSubscription>() => T;
}

export interface AggregateActivity {
  count: Int;
}

export interface AggregateActivityPromise
  extends Promise<AggregateActivity>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateActivitySubscription
  extends Promise<AsyncIterator<AggregateActivity>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ActivityEdge {
  node: Activity;
  cursor: String;
}

export interface ActivityEdgePromise
  extends Promise<ActivityEdge>,
    Fragmentable {
  node: <T = ActivityPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ActivityEdgeSubscription
  extends Promise<AsyncIterator<ActivityEdge>>,
    Fragmentable {
  node: <T = ActivitySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface Activity {
  id: ID_Output;
  name: String;
  color: String;
  progress: Int[];
  target: Int[];
  start: Int[];
  end: Int[];
  repeat: Int[];
  adds: Boolean;
  nextReset: Int;
}

export interface ActivityPromise extends Promise<Activity>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  color: () => Promise<String>;
  progress: () => Promise<Int[]>;
  target: () => Promise<Int[]>;
  start: () => Promise<Int[]>;
  end: () => Promise<Int[]>;
  repeat: () => Promise<Int[]>;
  adds: () => Promise<Boolean>;
  nextReset: () => Promise<Int>;
  createdBy: <T = UserPromise>() => T;
}

export interface ActivitySubscription
  extends Promise<AsyncIterator<Activity>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  color: () => Promise<AsyncIterator<String>>;
  progress: () => Promise<AsyncIterator<Int[]>>;
  target: () => Promise<AsyncIterator<Int[]>>;
  start: () => Promise<AsyncIterator<Int[]>>;
  end: () => Promise<AsyncIterator<Int[]>>;
  repeat: () => Promise<AsyncIterator<Int[]>>;
  adds: () => Promise<AsyncIterator<Boolean>>;
  nextReset: () => Promise<AsyncIterator<Int>>;
  createdBy: <T = UserSubscription>() => T;
}

export interface ActivityNullablePromise
  extends Promise<Activity | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  color: () => Promise<String>;
  progress: () => Promise<Int[]>;
  target: () => Promise<Int[]>;
  start: () => Promise<Int[]>;
  end: () => Promise<Int[]>;
  repeat: () => Promise<Int[]>;
  adds: () => Promise<Boolean>;
  nextReset: () => Promise<Int>;
  createdBy: <T = UserPromise>() => T;
}

export interface ActivityConnection {
  pageInfo: PageInfo;
  edges: ActivityEdge[];
}

export interface ActivityConnectionPromise
  extends Promise<ActivityConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ActivityEdge>>() => T;
  aggregate: <T = AggregateActivityPromise>() => T;
}

export interface ActivityConnectionSubscription
  extends Promise<AsyncIterator<ActivityConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ActivityEdgeSubscription>>>() => T;
  aggregate: <T = AggregateActivitySubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  username: String;
  email: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  activities: <T = FragmentableArray<Activity>>(args?: {
    where?: ActivityWhereInput;
    orderBy?: ActivityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  activities: <T = Promise<AsyncIterator<ActivitySubscription>>>(args?: {
    where?: ActivityWhereInput;
    orderBy?: ActivityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  activities: <T = FragmentableArray<Activity>>(args?: {
    where?: ActivityWhereInput;
    orderBy?: ActivityOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Activity",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
