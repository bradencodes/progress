module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.31.2). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type Activity {
  id: ID!
  name: String!
  color: String!
  progress: [Int!]!
  target: [Int!]!
  start: [Int!]!
  end: [Int!]!
  repeat: [Int!]!
  adds: Boolean!
  nextReset: Int!
}

type ActivityConnection {
  pageInfo: PageInfo!
  edges: [ActivityEdge]!
  aggregate: AggregateActivity!
}

input ActivityCreateendInput {
  set: [Int!]
}

input ActivityCreateInput {
  id: ID
  name: String!
  color: String!
  progress: ActivityCreateprogressInput
  target: ActivityCreatetargetInput
  start: ActivityCreatestartInput
  end: ActivityCreateendInput
  repeat: ActivityCreaterepeatInput
  adds: Boolean!
  nextReset: Int!
}

input ActivityCreateprogressInput {
  set: [Int!]
}

input ActivityCreaterepeatInput {
  set: [Int!]
}

input ActivityCreatestartInput {
  set: [Int!]
}

input ActivityCreatetargetInput {
  set: [Int!]
}

type ActivityEdge {
  node: Activity!
  cursor: String!
}

enum ActivityOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  color_ASC
  color_DESC
  adds_ASC
  adds_DESC
  nextReset_ASC
  nextReset_DESC
}

type ActivityPreviousValues {
  id: ID!
  name: String!
  color: String!
  progress: [Int!]!
  target: [Int!]!
  start: [Int!]!
  end: [Int!]!
  repeat: [Int!]!
  adds: Boolean!
  nextReset: Int!
}

type ActivitySubscriptionPayload {
  mutation: MutationType!
  node: Activity
  updatedFields: [String!]
  previousValues: ActivityPreviousValues
}

input ActivitySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ActivityWhereInput
  AND: [ActivitySubscriptionWhereInput!]
  OR: [ActivitySubscriptionWhereInput!]
  NOT: [ActivitySubscriptionWhereInput!]
}

input ActivityUpdateendInput {
  set: [Int!]
}

input ActivityUpdateInput {
  name: String
  color: String
  progress: ActivityUpdateprogressInput
  target: ActivityUpdatetargetInput
  start: ActivityUpdatestartInput
  end: ActivityUpdateendInput
  repeat: ActivityUpdaterepeatInput
  adds: Boolean
  nextReset: Int
}

input ActivityUpdateManyMutationInput {
  name: String
  color: String
  progress: ActivityUpdateprogressInput
  target: ActivityUpdatetargetInput
  start: ActivityUpdatestartInput
  end: ActivityUpdateendInput
  repeat: ActivityUpdaterepeatInput
  adds: Boolean
  nextReset: Int
}

input ActivityUpdateprogressInput {
  set: [Int!]
}

input ActivityUpdaterepeatInput {
  set: [Int!]
}

input ActivityUpdatestartInput {
  set: [Int!]
}

input ActivityUpdatetargetInput {
  set: [Int!]
}

input ActivityWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  color: String
  color_not: String
  color_in: [String!]
  color_not_in: [String!]
  color_lt: String
  color_lte: String
  color_gt: String
  color_gte: String
  color_contains: String
  color_not_contains: String
  color_starts_with: String
  color_not_starts_with: String
  color_ends_with: String
  color_not_ends_with: String
  adds: Boolean
  adds_not: Boolean
  nextReset: Int
  nextReset_not: Int
  nextReset_in: [Int!]
  nextReset_not_in: [Int!]
  nextReset_lt: Int
  nextReset_lte: Int
  nextReset_gt: Int
  nextReset_gte: Int
  AND: [ActivityWhereInput!]
  OR: [ActivityWhereInput!]
  NOT: [ActivityWhereInput!]
}

input ActivityWhereUniqueInput {
  id: ID
}

type AggregateActivity {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createActivity(data: ActivityCreateInput!): Activity!
  updateActivity(data: ActivityUpdateInput!, where: ActivityWhereUniqueInput!): Activity
  updateManyActivities(data: ActivityUpdateManyMutationInput!, where: ActivityWhereInput): BatchPayload!
  upsertActivity(where: ActivityWhereUniqueInput!, create: ActivityCreateInput!, update: ActivityUpdateInput!): Activity!
  deleteActivity(where: ActivityWhereUniqueInput!): Activity
  deleteManyActivities(where: ActivityWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  activity(where: ActivityWhereUniqueInput!): Activity
  activities(where: ActivityWhereInput, orderBy: ActivityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Activity]!
  activitiesConnection(where: ActivityWhereInput, orderBy: ActivityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ActivityConnection!
  node(id: ID!): Node
}

type Subscription {
  activity(where: ActivitySubscriptionWhereInput): ActivitySubscriptionPayload
}
`
      }
    